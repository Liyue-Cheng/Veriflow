# -----------------------------------------------------------------------------
# file: veriflow/sim/run_sim_vivado.py
#
# Xilinx Vivado 仿真器的具体实现。
# 定义了 run_vivado 函数，它会被 SimulationTask 动态加载和调用。
# 流程包括：编译、仿真。
#
# v1.0 更新:
# - 实现了完整的Vivado仿真流程
# - 添加了宏定义支持
# v2.0 更新:
# - 使用VeriLogger统一日志接口
# -----------------------------------------------------------------------------

import os

# 从同一包内的 simulators 模块导入工具函数
from .simulators import execute_command, find_rtl_files, format_macro_defines
# 导入统一的verilogger
from ..verilogger import logger as verilogger


def run_vivado(top_module, rtl_path, tb_path, work_dir, 
               task_name=None, compile_options=None, sim_options=None, 
               include_paths=None, tool_paths=None, defines=None):
    """
    使用 Xilinx Vivado 运行仿真。
    这是被 SimulationTask 调用的核心流程函数。
    
    :param top_module: 顶层模块名称
    :param rtl_path: RTL源文件路径
    :param tb_path: 测试平台文件路径
    :param work_dir: 工作目录
    :param task_name: 任务名称（可选）
    :param compile_options: 编译选项列表（可选）
    :param sim_options: 仿真选项列表（可选）
    :param include_paths: 包含路径列表（可选）
    :param tool_paths: 工具路径字典（可选）
    :param defines: 宏定义字典（可选），格式为 {'MACRO_NAME': 'value', 'MACRO_NAME2': None}
    """
    verilogger.subtitle(f"Preparing Vivado Simulation for task: {task_name}")

    # 初始化可选参数
    compile_options = compile_options or []
    sim_options = sim_options or []
    include_paths = include_paths or []
    tool_paths = tool_paths or {}
    macro_defines = defines or {}  # 为了内部代码清晰，使用macro_defines变量名

    # 从 tool_paths 获取工具路径，如果不存在，则假设它们在系统PATH中
    xvlog_exe = tool_paths.get('xvlog', 'xvlog')
    xelab_exe = tool_paths.get('xelab', 'xelab')
    xsim_exe = tool_paths.get('xsim', 'xsim')

    rtl_files_list = find_rtl_files(rtl_path)
    all_files_to_compile = rtl_files_list + [os.path.abspath(tb_path)]

    # --- 1. 编译步骤 (xvlog) ---
    verilogger.subtitle("[Vivado] Starting Compilation")
    
    # 构建 xvlog 命令
    compile_cmd_parts = [
        f'"{xvlog_exe}"',
        '-sv',              # 启用 SystemVerilog 支持
        '-log xvlog.log',   # 指定日志文件
        '-work work',       # 指定工作库
    ]

    # 添加 include 路径 (Vivado 使用 -i 参数)
    for path in include_paths:
        compile_cmd_parts.append(f'-i "{os.path.abspath(path)}"')

    # 添加宏定义
    if macro_defines:
        verilogger.info(f"Processing {len(macro_defines)} macro definitions")
        macro_args = format_macro_defines(macro_defines, 'vivado')
        compile_cmd_parts.extend(macro_args)

    # 添加自定义编译选项
    compile_cmd_parts.extend(compile_options)

    # 添加所有待编译文件
    for file_path in all_files_to_compile:
        compile_cmd_parts.append(f'"{file_path}"')

    compile_cmd = ' '.join(compile_cmd_parts)
    
    # 在 work_dir 中执行编译
    execute_command(compile_cmd, work_dir=work_dir)
    verilogger.success("[Vivado] Compilation Successful")

    # --- 2. 精化步骤 (xelab) ---
    verilogger.subtitle("[Vivado] Starting Elaboration")
    
    # 构建 xelab 命令
    elab_cmd_parts = [
        f'"{xelab_exe}"',
        '-debug typical',   # 启用调试模式
        '-log xelab.log',   # 指定日志文件
        '-snapshot sim_snapshot',  # 指定快照名称
        f'work.{top_module}',  # 指定顶层模块
    ]

    elab_cmd = ' '.join(elab_cmd_parts)
    
    # 在 work_dir 中执行精化
    execute_command(elab_cmd, work_dir=work_dir)
    verilogger.success("[Vivado] Elaboration Successful")

    # --- 3. 仿真步骤 (xsim) ---
    verilogger.subtitle("[Vivado] Starting Simulation")
    
    # 构建 xsim 命令
    sim_cmd_parts = [
        f'"{xsim_exe}"',
        'sim_snapshot',     # 使用之前生成的快照
        '-log xsim.log',    # 指定日志文件
        '-tclbatch run.tcl', # 指定TCL批处理文件
    ]
    
    # 添加自定义仿真选项
    sim_cmd_parts.extend(sim_options)

    # 首先创建 TCL 脚本
    tcl_script_path = os.path.join(work_dir, 'run.tcl')
    try:
        with open(tcl_script_path, 'w') as f:
            f.write("# Vivado TCL script (auto-generated by veriflow framework)\n\n")
            f.write("# Log all signals to waveform\n")
            f.write("log_wave -r /*\n\n")
            f.write("# Run simulation until $finish\n")
            f.write("run all\n\n")
            f.write("# Exit simulator\n")
            f.write("exit\n")
        verilogger.info(f"TCL script created at: {tcl_script_path}")
    except IOError as e:
        verilogger.error(f"Failed to create TCL script: {e}")
        raise

    sim_cmd = ' '.join(sim_cmd_parts)
    
    # 在 work_dir 中执行仿真
    execute_command(sim_cmd, work_dir=work_dir)
    verilogger.success("[Vivado] Simulation Successful")

    # 检查波形文件是否存在
    wave_file_path = os.path.join(work_dir, "waveform.wdb")
    if os.path.exists(wave_file_path):
        verilogger.info(f"Waveform file generated: {wave_file_path}")
    else:
        verilogger.warning("Waveform file 'waveform.wdb' not found. Check your simulation settings.")

    # 检查日志文件是否存在
    for log_file in ['xvlog.log', 'xelab.log', 'xsim.log']:
        log_file_path = os.path.join(work_dir, log_file)
        if os.path.exists(log_file_path):
            verilogger.info(f"Log file generated: {log_file_path}")
        else:
            verilogger.warning(f"Log file '{log_file}' not found.")
